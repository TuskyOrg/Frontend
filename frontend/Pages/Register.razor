@page "/register"

<h1>Register</h1>

<form>  
Username:  
<input type="text" name="Username" @bind="inputUsername">  
<br> <br>  
Password:  
<input type="password" name="Password" @bind="inputPassword">  
</form>  


<button class="btn btn-primary" @onclick="RegisterUser">Register</button>

<button class="btn btn-primary" @onclick="Login">Login</button>

<p>Register Response: @webResponse</p>

<p>Login Response: @loginText</p>

<p>Token Text: @tokenText</p>

<p>Error Text: @errorText</p>

<AuthorizeView>
    <Authorized>
        <h1>Hello, @context.User.Identity.Name!</h1>
        <p>You can only see this content if you're authenticated.</p>
    </Authorized>
    <Authorizing>
        <h1>Authentication in progress</h1>
        <p>You can only see this content while authentication is in progress.</p>
    </Authorizing>
</AuthorizeView>

@using System.Net;
@using System.Text.Json;
@using System.Text;
@using System.IO;
@using System.IdentityModel.Tokens.Jwt;
@using frontend.Networking;
@using System.Threading;

@code {
    const string RegisterUrl = "http://localhost:8007/auth/register";

     [Inject]
    public IAuthenticationService AuthenticationService { get; set; }

    const string LoginUrl = "http://localhost:8007/auth/jwt/login";

    private string inputUsername;
    private string inputPassword;

    private string webResponse = "";

    private string loginText = "";

    private string tokenText = "";

    private string errorText = "";
    private async void RegisterUser()
    {
        errorText = "";

        WebRequest webRequest = WebRequest.Create(RegisterUrl);
        webRequest.Method = "POST";
      

        UserRegistration newRegistration = new UserRegistration(){
            username = inputUsername,
            password = inputPassword
        };
        Console.WriteLine("Before AuthenticationService");
        RegistrationReponse response = await AuthenticationService.Register(newRegistration);
         Console.WriteLine("After AuthenticationService");
       if(response.SuccessfulReponse)
       {
            Console.WriteLine("Succesful");
             Console.WriteLine($"Succesful: {response.username}");
           webResponse = $"Succesful: {response.username}";
       }
       else{
            Console.WriteLine("Not Successful");
            webResponse = "error";
       }

        base.StateHasChanged();
        Login();

    

  
    }

    private async void Login()
    {
        errorText = "";
        var httpRequest = (HttpWebRequest)WebRequest.Create(LoginUrl);
        httpRequest.Method = "POST";

        httpRequest.ContentType = "application/x-www-form-urlencoded";

        var data = $"grant_type=&username={inputUsername}&password={inputPassword}&scope=&client_id=&client_secret=";
        
        LoginResponse response = await AuthenticationService.Login(data);
        if(response.IsSuccessful)
        {
            UserSingleton.Instance().jwt = new JwtSecurityTokenHandler().ReadJwtToken(response.access_token);
            tokenText = UserSingleton.Instance().jwt.Subject;
            loginText = "Succesful";        
        }
        else
        {
            loginText = "Error";
        }
      
       base.StateHasChanged();
        
    }
}
